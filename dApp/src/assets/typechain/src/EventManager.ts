/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Types {
  export type EventStructStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    desc: PromiseOrValue<string>;
    eventType: PromiseOrValue<BigNumberish>;
    orgName: PromiseOrValue<string>;
    logo: PromiseOrValue<string>;
    email: PromiseOrValue<string>;
    date: PromiseOrValue<BigNumberish>;
    website: PromiseOrValue<string>;
    ticketsSold: PromiseOrValue<BigNumberish>;
    maxCapacity: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
  };

  export type EventStructStructOutput = [
    BigNumber,
    string,
    string,
    number,
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    name: string;
    desc: string;
    eventType: number;
    orgName: string;
    logo: string;
    email: string;
    date: BigNumber;
    website: string;
    ticketsSold: BigNumber;
    maxCapacity: BigNumber;
    owner: string;
  };
}

export interface EventManagerInterface extends utils.Interface {
  functions: {
    "allOwnersEvents(uint256,uint256)": FunctionFragment;
    "createNewEvent(string,string,(uint256,string,string,uint8,string,string,string,uint256,string,uint256,uint256,address))": FunctionFragment;
    "eventAt(uint256)": FunctionFragment;
    "eventCreationFee()": FunctionFragment;
    "eventsSize()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEventCreationFee(uint256)": FunctionFragment;
    "ticketMarket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allOwnersEvents"
      | "createNewEvent"
      | "eventAt"
      | "eventCreationFee"
      | "eventsSize"
      | "owner"
      | "renounceOwnership"
      | "setEventCreationFee"
      | "ticketMarket"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allOwnersEvents",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Types.EventStructStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eventAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventsSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEventCreationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allOwnersEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventsSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "eventCreated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "eventCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface eventCreatedEventObject {
  owner: string;
  eventID: BigNumber;
}
export type eventCreatedEvent = TypedEvent<
  [string, BigNumber],
  eventCreatedEventObject
>;

export type eventCreatedEventFilter = TypedEventFilter<eventCreatedEvent>;

export interface EventManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allOwnersEvents(
      start: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    createNewEvent(
      ticketNFTName: PromiseOrValue<string>,
      ticketNFTSymbol: PromiseOrValue<string>,
      eventDetails: Types.EventStructStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eventAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    eventCreationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    eventsSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEventCreationFee(
      newEventCreationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketMarket(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allOwnersEvents(
    start: PromiseOrValue<BigNumberish>,
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  createNewEvent(
    ticketNFTName: PromiseOrValue<string>,
    ticketNFTSymbol: PromiseOrValue<string>,
    eventDetails: Types.EventStructStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eventAt(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  eventCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

  eventsSize(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEventCreationFee(
    newEventCreationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketMarket(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allOwnersEvents(
      start: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    createNewEvent(
      ticketNFTName: PromiseOrValue<string>,
      ticketNFTSymbol: PromiseOrValue<string>,
      eventDetails: Types.EventStructStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    eventAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    eventCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    eventsSize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEventCreationFee(
      newEventCreationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketMarket(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "eventCreated(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      eventID?: PromiseOrValue<BigNumberish> | null
    ): eventCreatedEventFilter;
    eventCreated(
      owner?: PromiseOrValue<string> | null,
      eventID?: PromiseOrValue<BigNumberish> | null
    ): eventCreatedEventFilter;
  };

  estimateGas: {
    allOwnersEvents(
      start: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewEvent(
      ticketNFTName: PromiseOrValue<string>,
      ticketNFTSymbol: PromiseOrValue<string>,
      eventDetails: Types.EventStructStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eventAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eventCreationFee(overrides?: CallOverrides): Promise<BigNumber>;

    eventsSize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEventCreationFee(
      newEventCreationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketMarket(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allOwnersEvents(
      start: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewEvent(
      ticketNFTName: PromiseOrValue<string>,
      ticketNFTSymbol: PromiseOrValue<string>,
      eventDetails: Types.EventStructStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eventAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventCreationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventsSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEventCreationFee(
      newEventCreationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
