/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Types, TypesInterface } from "../../../src/Libraries/Types";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ticketCategoryId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "mintedTokens",
        type: "uint256[]",
      },
    ],
    name: "NewTicket",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "logo",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "ticketsSold",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "maxTickets",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct Types.TicketPrice[4]",
        name: "ticketPrices",
        type: "tuple[4]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "requiresNFT",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
    ],
    name: "NewTicketCategory",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122032025b177c00303c5a4c1039a3dbe83a265f824c8e41ba2d9bf84aa293421e8b64736f6c63430008110033";

type TypesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TypesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Types__factory extends ContractFactory {
  constructor(...args: TypesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Types> {
    return super.deploy(overrides || {}) as Promise<Types>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Types {
    return super.attach(address) as Types;
  }
  override connect(signer: Signer): Types__factory {
    return super.connect(signer) as Types__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TypesInterface {
    return new utils.Interface(_abi) as TypesInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Types {
    return new Contract(address, _abi, signerOrProvider) as Types;
  }
}
