/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Types {
  export type TicketPriceStruct = {
    price: PromiseOrValue<BigNumberish>;
    currency: PromiseOrValue<string>;
  };

  export type TicketPriceStructOutput = [BigNumber, string] & {
    price: BigNumber;
    currency: string;
  };
}

export interface TypesInterface extends utils.Interface {
  functions: {};

  events: {
    "NewTicket(uint256,uint256,address,uint256[])": EventFragment;
    "NewTicketCategory(uint256,uint256,string,string,uint32,uint32,tuple[4],bool,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTicket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTicketCategory"): EventFragment;
}

export interface NewTicketEventObject {
  eventId: BigNumber;
  ticketCategoryId: BigNumber;
  buyer: string;
  mintedTokens: BigNumber[];
}
export type NewTicketEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber[]],
  NewTicketEventObject
>;

export type NewTicketEventFilter = TypedEventFilter<NewTicketEvent>;

export interface NewTicketCategoryEventObject {
  eventId: BigNumber;
  id: BigNumber;
  name: string;
  logo: string;
  ticketsSold: number;
  maxTickets: number;
  ticketPrices: [
    Types.TicketPriceStructOutput,
    Types.TicketPriceStructOutput,
    Types.TicketPriceStructOutput,
    Types.TicketPriceStructOutput
  ];
  requiresNFT: boolean;
  nftAddress: string;
}
export type NewTicketCategoryEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    string,
    number,
    number,
    [
      Types.TicketPriceStructOutput,
      Types.TicketPriceStructOutput,
      Types.TicketPriceStructOutput,
      Types.TicketPriceStructOutput
    ],
    boolean,
    string
  ],
  NewTicketCategoryEventObject
>;

export type NewTicketCategoryEventFilter =
  TypedEventFilter<NewTicketCategoryEvent>;

export interface Types extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TypesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "NewTicket(uint256,uint256,address,uint256[])"(
      eventId?: null,
      ticketCategoryId?: null,
      buyer?: null,
      mintedTokens?: null
    ): NewTicketEventFilter;
    NewTicket(
      eventId?: null,
      ticketCategoryId?: null,
      buyer?: null,
      mintedTokens?: null
    ): NewTicketEventFilter;

    "NewTicketCategory(uint256,uint256,string,string,uint32,uint32,tuple[4],bool,address)"(
      eventId?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      logo?: null,
      ticketsSold?: null,
      maxTickets?: null,
      ticketPrices?: null,
      requiresNFT?: null,
      nftAddress?: null
    ): NewTicketCategoryEventFilter;
    NewTicketCategory(
      eventId?: PromiseOrValue<BigNumberish> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      name?: null,
      logo?: null,
      ticketsSold?: null,
      maxTickets?: null,
      ticketPrices?: null,
      requiresNFT?: null,
      nftAddress?: null
    ): NewTicketCategoryEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
