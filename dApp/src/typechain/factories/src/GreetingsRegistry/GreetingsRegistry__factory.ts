/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GreetingsRegistry,
  GreetingsRegistryInterface,
} from "../../../src/GreetingsRegistry/GreetingsRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "prefix",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "MessageChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "messages",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "prefix",
        type: "string",
      },
    ],
    name: "postUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "setMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523461021a5761090d8038038061001981610233565b928339810190602090818184031261021a5780516001600160401b039182821161021a570191601f9084828501121561021a5783518381116101f957601f199461006882850187168401610233565b9682885283838301011161021a57829060005b83811061021f575050600091870101527fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b03919082168061020f5750555b84519283116101f95760019384548581811c911680156101ef575b838210146101d957838111610193575b5081928411600114610134575050819293600092610129575b5050600019600383901b1c191690821b1790555b6040516106b490816102598239f35b015190503880610106565b6000858152828120918516969193925b87821061017c57505083859610610163575b505050811b01905561011a565b015160001960f88460031b161c19169055388080610156565b808785968294968601518155019501930190610144565b85600052826000208480870160051c8201928588106101d0575b0160051c019086905b8281106101c45750506100ed565b600081550186906101b6565b925081926101ad565b634e487b7160e01b600052602260045260246000fd5b90607f16906100dd565b634e487b7160e01b600052604160045260246000fd5b9150503303156100c2575b600080fd5b81810183015189820184015284920161007b565b6040519190601f01601f191682016001600160401b038111838210176101f95760405256fe608060409080825260048036101561001657600080fd5b600091823560e01c908163368b877214610347575080635fdd59f81461026a5763b1441ce61461004557600080fd5b34610266576020908160031936011261026257803567ffffffffffffffff91828211610247573660238301121561024757818101359583871161024f575195601f1992610099601f830185168701896105fd565b818852366024838301011161024b578187926024889301838b0137880101527fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b03919082168061023c5750555b8551928311610229575060019261010684546105c3565b601f81116101c5575b508091601f841160011461014b575050839482939492610140575b5050600019600383901b1c191690821b17905580f35b01519050388061012a565b8486528316957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6929186905b8882106101ae5750508385969710610195575b505050811b01905580f35b015160001960f88460031b161c1916905538808061018a565b808785968294968601518155019501930190610177565b8486527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f850160051c81019183861061021f575b601f0160051c019085905b82811061021457505061010f565b878155018590610206565b90915081906101fb565b634e487b7160e01b855260419052602484fd5b9150503303156100ef575b8480fd5b8680fd5b634e487b7160e01b865260418252602486fd5b8280fd5b5080fd5b508234610262576020918260031936011261034357356001600160a01b0381169081900361034357835282825280832091815192848154906102ab826105c3565b8087529260019280841690811561031f57506001146102e4575b6102e087876102d6828c03836105fd565b5191829182610635565b0390f35b9080949750528583205b82841061030c57505050826102e0946102d6928201019486806102c5565b80548685018801529286019281016102ee565b60ff19168887015250505050151560051b83010192506102d6826102e086806102c5565b8380fd5b919390503461026257602093846003193601126103435767ffffffffffffffff81358181116105bf57366023820112156105bf578083013582811161024b57366024828401011161024b578590876001938a85546103a4816105c3565b908588821691826000146105a2575050600114610549575b5050602483910182370187815203966103dd601f19988981018852876105fd565b33875286815284872093865193841161053657506103fb84546105c3565b601f81116104f0575b508097601f841160011461047157505081809187987f5de788bae851e5b8df641f15cc3e7e401946111d99b835b0e3f619b04f8ce68f979893610466575b501b916000199060031b1c19161790555b5180610460339482610635565b0390a280f35b880151925038610442565b83929316978488528188209188905b8a82106104d9575050827f5de788bae851e5b8df641f15cc3e7e401946111d99b835b0e3f619b04f8ce68f979899106104c0575b5050811b019055610453565b87015160001960f88460031b161c1916905538806104b4565b808684958294958c01518155019401920190610480565b848852818820601f850160051c81019183861061052c575b601f0160051c019083905b828110610521575050610404565b898155018390610513565b9091508190610508565b634e487b7160e01b885260419052602487fd5b868c52919250908a867fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b83831061058957505050840101908a836103bc565b80549783018501979097528b9691840191889101610574565b60ff191688850152821515909202870190920193508c91506103bc565b8580fd5b90600182811c921680156105f3575b60208310146105dd57565b634e487b7160e01b600052602260045260246000fd5b91607f16916105d2565b90601f8019910116810190811067ffffffffffffffff82111761061f57604052565b634e487b7160e01b600052604160045260246000fd5b6020808252825181830181905290939260005b82811061066a57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161064856fea264697066735822122007f89a1b2e11f0208e56d0244f57870c9bd61b495ff00884157aac8c3744f30f64736f6c63430008110033";

type GreetingsRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreetingsRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GreetingsRegistry__factory extends ContractFactory {
  constructor(...args: GreetingsRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    prefix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GreetingsRegistry> {
    return super.deploy(prefix, overrides || {}) as Promise<GreetingsRegistry>;
  }
  override getDeployTransaction(
    prefix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(prefix, overrides || {});
  }
  override attach(address: string): GreetingsRegistry {
    return super.attach(address) as GreetingsRegistry;
  }
  override connect(signer: Signer): GreetingsRegistry__factory {
    return super.connect(signer) as GreetingsRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreetingsRegistryInterface {
    return new utils.Interface(_abi) as GreetingsRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GreetingsRegistry {
    return new Contract(address, _abi, signerOrProvider) as GreetingsRegistry;
  }
}
