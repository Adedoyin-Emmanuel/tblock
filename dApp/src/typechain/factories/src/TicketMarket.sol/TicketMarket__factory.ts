/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TicketMarket,
  TicketMarketInterface,
} from "../../../src/TicketMarket.sol/TicketMarket";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    name: "ListingCanceled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    name: "ListingCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
    ],
    name: "ListingPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    name: "ListingUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "cancelListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createListingForSeller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "isNftListed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "listings",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "purchaseListing",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newPrice",
        type: "uint256",
      },
    ],
    name: "updateListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610c6d908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816207df30146109715750806305730cc61461092b57806324780c561461071a57806389cf90e5146104bd578063a7fc91b91461028b578063b2ddee061461019a5763f772adf11461006f57600080fd5b346101965761007d366109dc565b9260018060a09493941b039081831690818852602092888452878920868a5284526100ac888a20541515610bcb565b87516331a9108f60e11b81529182018690528382602481865afa91821561018c576101579594927f3199bfdff711ec1ab8ab8449dc3b8d3fa30a59861a734a9d26f7b1a38162df7599949261010b928c9261015d575b50163314610ac5565b610116871515610b11565b88528781528188208589529052808720859055516001600160a01b039091168152602081019290925260408201929092523360608201529081906080820190565b0390a180f35b61017e919250853d8711610185575b6101768183610a84565b810190610aa6565b9038610102565b503d61016c565b88513d8b823e3d90fd5b8280fd5b50346101965781600319360112610196576101b36109c1565b6024359060018060a01b038091169283865260209186835285872084885283526101e1868820541515610bcb565b85516331a9108f60e11b81529182018490528282602481885afa9182156102815760609594927fcf45896873f759e6a8c2348e49ff9892b89458850ab6c70339e1c430227ce91d97949261023e928a926102695750163314610ac5565b838752868152828720828852815260006001848920828155015582519384528301523390820152a180f35b61017e919250843d8611610185576101768183610a84565b86513d89823e3d90fd5b50816003193601126101965761029f6109c1565b9160249283359060018060a01b038091169485875260209487865284882084895286526102d0858920541515610bcb565b8688528786528488208489528652848820918551926102ee84610a52565b878560018354938488520154169401938452340361046f57878952888752858920858a528752886001878220828155015583835116883b1561046b57865190632142170760e11b82528382015233828201528560448201528981606481838d5af1801561046157610434575b508880808034888851165af13d1561042f573d67ffffffffffffffff811161041d57875190610392601f8201601f19168b0183610a84565b81528a893d92013e5b156103e257887fab7369fca6913c40e2bf7144b586a1a0e894bd32f5f9e74128cd89fb54f7bf9460808a8a8a8a8a8a5116928251948552840152820152336060820152a180f35b855162461bcd60e51b81529182018790526016908201527508cc2d2d8cac840e8de40e8e4c2dce6cccae440cae8d60531b6044820152606490fd5b634e487b7160e01b8b5260418452828bfd5b61039b565b67ffffffffffffffff819a929a1161044f578652973861035a565b5060418992634e487b7160e01b835252fd5b87513d8c823e3d90fd5b8980fd5b855162461bcd60e51b8152918201879052808201527f5469636b65744d61726b65743a20496e636f72726563742045544820737570706044820152631b1a595960e21b606482015260849150fd5b5034610196576080366003190112610196576104d76109c1565b602435906001600160a01b038083169081840361071657604435946064359280895288602081815289822089835281526105148a83205415610a06565b89516331a9108f60e11b81528481018a9052938185602481875afa9485156106b65786956105509185916106f9575b5089871697168714610ac5565b61055b871515610b11565b8a5163e985e9c560e01b81526001600160a01b0389168282019081523060208201529091908390839081906040010381885afa9182156106ef5784926106c0575b508115610637575b5092600080516020610c188339815191529a94926001926105ca6101579a999896610b75565b8651926105d684610a52565b8884528184019687528252818152868220918c905252848c20905181559251920180546001600160a01b03191691909216179055516001600160a01b0394851681526020810195909552604085015291909116606083015281906080820190565b8b5163020604bf60e21b81529081018b905290508181602481875afa9081156106b657926001926105ca6101579a99989693600080516020610c188339815191529e98968491610699575b508630911614939698999a5050925092949a6105a4565b6106b09150833d8511610185576101768183610a84565b38610682565b8b513d85823e3d90fd5b6106e1919250833d85116106e8575b6106d98183610a84565b810190610b5d565b903861059c565b503d6106cf565b8c513d86823e3d90fd5b6107109150843d8611610185576101768183610a84565b38610543565b8680fd5b503461019657610729366109dc565b9260018060a09493941b0380831691828852602090888252878920868a528252610756888a205415610a06565b87516331a9108f60e11b81528181018790528281602481885afa80156109045761078b918b9161090e575b5084163314610ac5565b610796871515610b11565b875163e985e9c560e01b8152338282019081523060208201529091908390839081906040010381885afa918215610904578a926108e5575b50811561086c575b509160016101579594926107f9600080516020610c188339815191529a95610b75565b84519061080582610a52565b898252808201943386528c528b8152858c2090898d5252848b2090518155019151166bffffffffffffffffffffffff60a01b8254161790555193849333928592936060929594608085019660018060a01b0380941686526020860152604085015216910152565b885163020604bf60e21b815290810187905290508181602481875afa90811561018c576101579594926107f9600080516020610c188339815191529a95936001938d916108c8575b50843091161493959a5050929495506107d6565b6108df9150833d8511610185576101768183610a84565b386108b4565b6108fd919250833d85116106e8576106d98183610a84565b90386107ce565b89513d8c823e3d90fd5b6109259150843d8611610185576101768183610a84565b38610781565b50503461096d578060031936011261096d5760209181906001600160a01b036109526109c1565b16815280845281812060243582528452205415159051908152f35b5080fd5b839085346109be57826003193601126109be576001600160a01b03908390826109986109c1565b168152806020528181206024358252602052209060018254920154169082526020820152f35b80fd5b600435906001600160a01b03821682036109d757565b600080fd5b60609060031901126109d7576004356001600160a01b03811681036109d757906024359060443590565b15610a0d57565b60405162461bcd60e51b815260206004820152601c60248201527f5469636b65744d61726b65743a20416c7265616479206c6973746564000000006044820152606490fd5b6040810190811067ffffffffffffffff821117610a6e57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610a6e57604052565b908160209103126109d757516001600160a01b03811681036109d75790565b15610acc57565b60405162461bcd60e51b815260206004820152601b60248201527f5469636b65744d61726b65743a204e6f7420746865206f776e657200000000006044820152606490fd5b15610b1857565b60405162461bcd60e51b815260206004820152601f60248201527f5469636b65744d61726b65743a205072696365206d757374206265203e2030006044820152606490fd5b908160209103126109d7575180151581036109d75790565b15610b7c57565b60405162461bcd60e51b815260206004820152602160248201527f5469636b65744d61726b65743a204e6f20617070726f76616c20666f72204e466044820152601560fa1b6064820152608490fd5b15610bd257565b60405162461bcd60e51b815260206004820152601860248201527f5469636b65744d61726b65743a204e6f74206c697374656400000000000000006044820152606490fdfedc801191e0c92935648f61c8e3d0cd8eac1d060269ddb920487d02ab0be69e7da2646970667358221220f5e8a1cbf17d54af8117a718c8ef1841ffe52637f64c006ef575208ccf567e2164736f6c63430008110033";

type TicketMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TicketMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TicketMarket__factory extends ContractFactory {
  constructor(...args: TicketMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TicketMarket> {
    return super.deploy(overrides || {}) as Promise<TicketMarket>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TicketMarket {
    return super.attach(address) as TicketMarket;
  }
  override connect(signer: Signer): TicketMarket__factory {
    return super.connect(signer) as TicketMarket__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TicketMarketInterface {
    return new utils.Interface(_abi) as TicketMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TicketMarket {
    return new Contract(address, _abi, signerOrProvider) as TicketMarket;
  }
}
